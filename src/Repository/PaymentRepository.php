<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use App\Entity\Voucher;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends EntityRepository
{
    public function getSumUpPaymentsForDateRange($paymentTypes, \DateTime $startDate, \DateTime $endDate)
    {
        return $this->createQueryBuilder('p')
        ->where('p.created >= :startdate')
        ->andwhere('p.created < :enddate')
        ->andwhere('p.refunded = :refunded')
        ->andWhere('p.paymentType in(:paymentType)')
        ->setParameter('startdate', $startDate->format('Y-m-d'))
        ->setParameter('enddate', $endDate->format('Y-m-d') )
        ->setParameter('refunded', false)
        ->setParameter('paymentType', $paymentTypes)
        ->orderBy('p.created', 'ASC')
        ->getQuery()
        ->execute();
    }

    public function getPaymentsForBooking($booking)
    {
        return $this->createQueryBuilder('pay')
            ->leftJoin('pay.purchases', 'pur')
            ->leftJoin('pur.passenger', 'pass')
            ->leftJoin('pass.booking', 'b')
            ->where('b.id = :booking')
            ->setParameter('booking', $booking)
            ->addOrderBy('pay.created', 'ASC')
            ->addOrderBy('pay.id', 'ASC')
            ->getQuery()
            ->execute();

    }

    public function getPaymentsForVoucher($voucher)
    {
        return $this->createQueryBuilder('pay')
            ->leftJoin('pay.purchases', 'pur')
            ->leftJoin(Voucher::class, 'v', Expr\Join::WITH, 'pur.id = :purchase')
            ->where('v.id = :voucher')
            ->setParameter('voucher', $voucher)
            ->setParameter('purchase', $voucher->getPurchase())
            ->addOrderBy('pay.created', 'ASC')
            ->addOrderBy('pay.id', 'ASC')
            ->getQuery()
            ->execute();

    }

    public function getPaymentsForPassenger($passenger)
    {
        return $this->createQueryBuilder('pay')
        ->leftJoin('pay.purchases', 'pur')
        ->leftJoin('pur.passenger', 'pass')
        ->where('pass.id = :passenger')
        ->setParameter('passenger', $passenger)
        ->addOrderBy('pay.created', 'ASC')
        ->addOrderBy('pay.id', 'ASC')
        ->getQuery()
        ->execute();
    
    }
    
    public function findAllBetweenDates($beginDate, $endDate)
    {
        return $this->createQueryBuilder('pay')
        ->where('pay.created between :beginDate and :endDate')
        ->setParameter('beginDate', $beginDate)
        ->setParameter('endDate', $endDate)
        ->orderBy('pay.created', 'ASC')
        ->getQuery()
        ->execute();
    }

    public function getSumUpPaymentsForBooking($booking)
    {
        return $this->createQueryBuilder('pay')
        ->leftJoin('pay.purchases', 'pur')
        ->leftJoin('pay.paymentType', 'pt')
        ->leftJoin('pur.passenger', 'pass')
        ->leftJoin('pass.booking', 'b')
        ->where('b.id = :booking')
        ->andWhere('pt.sumUpPayment = true')
        ->setParameter('booking', $booking)
        ->addOrderBy('pay.created', 'ASC')
        ->addOrderBy('pay.id', 'ASC')
        ->getQuery()
        ->execute();
    
    }

}
